/*
 With the step3,
 - When you run `gradle publish`, it will pass.
 - It will generates a jar file under the `build/libs` directory.
 - The Jar's file name is `step3-1.0.jar`.
 - The archiveBaseName defaults to the value of `rootProject.name` declared in the `settings.gradle`.
 - This build.gradle creates a local Maven Repository at `build/repos-maven` where
   you can see the publish artifacts.
 - Surprisingly enough, in the `build/repos-maven` directory, you will find 2 sets of artifacts published:
   - `com/example/step2/1.0/step3-1.0.jar` and associateds
   - `org/sample/Greetings/org.sample.Greetings.gradle.plugin/1.0/maven-metadata.xml` and associateds
 */
plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
}

group = 'com.example'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

gradlePlugin {
    // Define the plugin
    plugins {
        MyGreeting {
            id = 'org.sample.Greetings'
            implementationClass = 'com.example.greeting.GreetingPlugin'
        }
    }
}

publishing {
    repositories {
        maven {
            url = layout.buildDirectory.dir("repos-maven")
        }
    }
}

// https://docs.gradle.org/current/userguide/publishing_gradle_module_metadata.html#sub:disabling-gmm-publication
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}
